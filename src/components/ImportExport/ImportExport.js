import React, { useRef, useState } from 'react';
import './ImportExport.css';

const ImportExport = ({
  currentConfiguration,
  onConfigurationImport,
  onImportError
}) => {
  const fileInputRef = useRef(null);
  const [isProcessing, setIsProcessing] = useState(false);

  const handleExport = () => {
    const config = {
      baseBodyId: currentConfiguration.baseBodyId,
      elements: currentConfiguration.elements.map(element => ({
        id: element.id,
        segmentId: element.segmentId,
        spriteId: element.spriteId,
        color: element.color,
        position: element.position
      })),
      baseBodyColor: currentConfiguration.baseBodyColor,
      exportDate: new Date().toISOString(),
      version: '1.0'
    };

    const dataStr = JSON.stringify(config, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `pigeon-config-${new Date().toISOString().slice(0, 10)}.json`;
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    URL.revokeObjectURL(url);
  };

  const handleImportClick = () => {
    fileInputRef.current?.click();
  };

  const validateConfiguration = (config) => {
    const errors = [];

    if (!config || typeof config !== 'object') {
      errors.push('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON –æ–±—ä–µ–∫—Ç–∞');
      return errors;
    }

    if (!config.baseBodyId || typeof config.baseBodyId !== 'string') {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π baseBodyId');
    }

    if (!Array.isArray(config.elements)) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ elements');
    } else {
      config.elements.forEach((element, index) => {
        if (!element.id || typeof element.id !== 'string') {
          errors.push(`–≠–ª–µ–º–µ–Ω—Ç ${index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π id`);
        }
        if (!element.segmentId || typeof element.segmentId !== 'string') {
          errors.push(`–≠–ª–µ–º–µ–Ω—Ç ${index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π segmentId`);
        }
        if (!element.spriteId || typeof element.spriteId !== 'string') {
          errors.push(`–≠–ª–µ–º–µ–Ω—Ç ${index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π spriteId`);
        }
        if (element.position && typeof element.position === 'object') {
          if (typeof element.position.x !== 'number' || typeof element.position.y !== 'number') {
            errors.push(`–≠–ª–µ–º–µ–Ω—Ç ${index}: –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã position`);
          }
        } else {
          errors.push(`–≠–ª–µ–º–µ–Ω—Ç ${index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π position`);
        }
      });
    }

    return errors;
  };

  const handleFileSelect = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setIsProcessing(true);

    try {
      const text = await file.text();
      const config = JSON.parse(text);
      
      const validationErrors = validateConfiguration(config);
      
      if (validationErrors.length > 0) {
        onImportError({
          type: 'validation',
          message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
          details: validationErrors
        });
        return;
      }

      onConfigurationImport(config);
      
    } catch (error) {
      if (error instanceof SyntaxError) {
        onImportError({
          type: 'parse',
          message: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–∞',
          details: [error.message]
        });
      } else {
        onImportError({
          type: 'unknown',
          message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ',
          details: [error.message]
        });
      }
    } finally {
      setIsProcessing(false);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
      event.target.value = '';
    }
  };

  const getCurrentConfigInfo = () => {
    const info = [];
    
    if (currentConfiguration.baseBodyId) {
      info.push(`–ë–∞–∑–æ–≤–æ–µ —Ç–µ–ª–æ: ${currentConfiguration.baseBodyId}`);
    }
    
    info.push(`–≠–ª–µ–º–µ–Ω—Ç–æ–≤: ${currentConfiguration.elements.length}`);
    
    const coloredElements = currentConfiguration.elements.filter(el => el.color).length;
    if (coloredElements > 0) {
      info.push(`–û–∫—Ä–∞—à–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${coloredElements}`);
    }
    
    if (currentConfiguration.baseBodyColor) {
      info.push(`–¶–≤–µ—Ç —Ç–µ–ª–∞: ${currentConfiguration.baseBodyColor}¬∞`);
    }
    
    return info;
  };

  return (
    <div className="import-export">
      <h3>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞</h3>
      
      <div className="config-info">
        <div className="config-summary">
          <strong>–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</strong>
          <ul>
            {getCurrentConfigInfo().map((info, index) => (
              <li key={index}>{info}</li>
            ))}
          </ul>
        </div>
      </div>

      <div className="action-buttons">
        <button
          className="export-button"
          onClick={handleExport}
          disabled={!currentConfiguration.baseBodyId}
        >
          üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        </button>
        
        <button
          className="import-button"
          onClick={handleImportClick}
          disabled={isProcessing}
        >
          {isProcessing ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : 'üì§ –ò–º–ø–æ—Ä—Ç –∏–∑ JSON'}
        </button>
      </div>

      <input
        ref={fileInputRef}
        type="file"
        accept=".json"
        onChange={handleFileSelect}
        style={{ display: 'none' }}
      />

      <div className="format-info">
        <details>
          <summary>‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</summary>
          <div className="format-details">
            <p>JSON —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</p>
            <ul>
              <li><strong>baseBodyId</strong> - ID –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ–ª–∞</li>
              <li><strong>elements</strong> - –º–∞—Å—Å–∏–≤ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤</li>
              <li><strong>baseBodyColor</strong> - —Ü–≤–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</li>
            </ul>
            <p>–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç: id, segmentId, spriteId, color, position</p>
          </div>
        </details>
      </div>
    </div>
  );
};

export default ImportExport;